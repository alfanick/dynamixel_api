#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
//#include <linux/serial.h>
#include <fcntl.h>


#include <sys/ioctl.h>
#include <sys/time.h>
#include "dxl_hal.h"

#define LATENCY_TIME        (16)

int	gSocket_fd	= -1;
long	glStartTime	= 0;
float	gfRcvWaitTime	= 0.0f;
float	gfByteTransTime	= 0.0f;

char	gDeviceName[40];

int dxl_hal_open(int deviceIndex, float baudrate) {
  printf("baudrate: %f\n", baudrate);

  struct termios tty;
  //struct serial_struct serinfo;
  char dev_name[100] = {0, };

  sprintf(dev_name, "/dev/tty.usbserial-A9QPXR73");
  strcpy(gDeviceName, dev_name);

  memset(&tty, 0, sizeof(tty));
  dxl_hal_close();

  if ((gSocket_fd = open(gDeviceName, O_RDWR|O_NOCTTY|O_NONBLOCK)) < 0) {
    fprintf(stderr, "device open error: %s\n", dev_name);
    goto DXL_HAL_OPEN_ERROR;
  }

  /* Set Baud Rate */
  cfsetospeed (&tty, (speed_t)B115200);
  cfsetispeed (&tty, (speed_t)B115200);

  /* Setting other Port Stuff */
  tty.c_cflag     &=  ~CSTOPB;
  tty.c_cflag     &=  ~CSIZE;

  tty.c_cflag     |=  CS8;
  tty.c_cflag     |=  CLOCAL;
  tty.c_cflag     |=  CREAD;
  tcsetattr(gSocket_fd, TCSANOW, &tty);



  /*// ONLY FOR OSX (http://stackoverflow.com/questions/9366249)
  #define IOSSIOSPEED _IOW('T', 2, speed_t)
  int new_baud = 1000000;
  ioctl (gSocket_fd, IOSSIOSPEED, &new_baud, 1);*/


  if(gSocket_fd == -1)
    return 0;

  return 1;

    DXL_HAL_OPEN_ERROR:
    dxl_hal_close();
  return 0;
}

void dxl_hal_close() {
  if(gSocket_fd != -1)
    close(gSocket_fd);
  gSocket_fd = -1;
}

int dxl_hal_set_baud(float baudrate) {
  printf("---UNIMPLEMENTED! baudrate: %f\n", baudrate);
  return 0;
}

void dxl_hal_clear(void) {
  tcflush(gSocket_fd, TCIFLUSH);
}

int dxl_hal_tx(unsigned char *pPacket, int numPacket) {
  return write(gSocket_fd, pPacket, numPacket);
}

int dxl_hal_rx(unsigned char *pPacket, int numPacket) {
  memset(pPacket, 0, numPacket);
  return read(gSocket_fd, pPacket, numPacket);
}

static inline long myclock() {
  struct timeval tv;
  gettimeofday (&tv, NULL);
  return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

void dxl_hal_set_timeout(int NumRcvByte) {
  glStartTime = myclock();
  gfRcvWaitTime = (float)(gfByteTransTime * (float)NumRcvByte + 2.0 * LATENCY_TIME + 5.0f);
}

int dxl_hal_timeout(void) {
  long time;

  time = myclock() - glStartTime;

  if (time > gfRcvWaitTime)
    return 1;
  else if (time < 0)
    glStartTime = myclock();

  return 0;
}
